#!/usr/bin/env groovy

def defaultBobImage = 'armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob.2.0:latest'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([
                HOME             : '/home/cbrsciadm',
                GERRIT_REFSPEC   : '${GERRIT_REFSPEC}',
                SITE_VALUES      : '${SITE_VALUES}',
                HELM_REPO_TOKEN  : '${HELM_REPO_TOKEN}',
                SERO_USER        : '${SERO_USER}',
                SERO_PASSWORD    : '${SERO_PASSWORD}',
                KUBECONFIG       : '${KUBECONFIG}',
                USER             : '${USER}',
                INT_CHART_NAME   : '${INT_CHART_NAME}',
                INT_CHART_REPO   : '${INT_CHART_REPO}',
                INT_CHART_VERSION: '${INT_CHART_VERSION}',
        ])
        .needDockerSocket(true)
        .toString()
def LOCKABLE_RESOURCE_LABEL = "16a040_va_namespace_1"
pipeline {
    agent {
        node {
            label 'GE7_Docker'
        }
    }
    options {
        disableConcurrentBuilds()
        lock(label: LOCKABLE_RESOURCE_LABEL, variable: 'RESOURCE_NAME', quantity: 1)
    }
    parameters {
        string(name: 'INT_CHART_NAME', defaultValue: 'eric-cbrs-dc-package', description: 'Chart name e.g.: eric-cbrs-dc-package')
        string(name: 'INT_CHART_REPO', description: 'Leave empty for latest. Chart repo e.g.: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-cbrs-dc-ci-internal-helm')
        string(name: 'INT_CHART_VERSION', description: 'Leave empty for latest. Chart version e.g.: 1.0.0-1')
        string(name: 'GERRIT_REFSPEC', defaultValue: '', description: 'Optional. Gerrit Refspect e.g.: refs/changes/87/4641487/1')
        string(name: 'TEST_SPEC_TAG', defaultValue: 'daily', description: 'Optional. Tests matching the specified tag will be executed (eg daily)')
        string(name: 'BUILD_DESCRIPTION', defaultValue: 'VA Daily test', description: 'Optional. For manually triggered builds it is recommended to include TORF number.')
    }
    environment {
        KUBECONFIG = "${WORKSPACE}/.kube/config"
        SITE_VALUES = "${WORKSPACE}/k8s-test/eric-cbrs-integration-values-application-staging-c16a036.yaml"
    }
    stages  {
        stage('Init') {
            environment {
                K8S_CONFIG_FILE_ID = sh(script: "echo \${RESOURCE_NAME} | cut -d'_' -f1", returnStdout: true).trim()
            }
            steps {
                script {
                    currentBuild.description = ''
                    if (params.BUILD_DESCRIPTION != null && params.BUILD_DESCRIPTION != "") {
                        currentBuild.description += params.BUILD_DESCRIPTION + '<br>'
                    }

                    if (params.INT_CHART_VERSION != null && params.INT_CHART_VERSION != "") {
                        currentBuild.description += params.INT_CHART_NAME + ': ' + params.INT_CHART_VERSION + '<br>'
                    }

                    if (params.GERRIT_REFSPEC != null && params.GERRIT_REFSPEC != "") {
                        sh "git fetch ${GIT_URL} ${GERRIT_REFSPEC} && git checkout FETCH_HEAD"
                        gtokens = params.GERRIT_REFSPEC.split("/")
                        currentBuild.description += '<a href="https://gerrit-gamma.gic.ericsson.se/#/c/' + gtokens[3] + '/' + gtokens[4] + '">gerrit change: ' + gtokens[3] + ',' + gtokens[4] + '</a>'
                    }
                }
                configFileProvider([configFile(fileId: "${K8S_CONFIG_FILE_ID}", targetLocation: "${env.KUBECONFIG}")]) {}
                sh "${bob} init -r ruleset-va-standalone.yaml"
            }
        }
        stage('Install') {
            steps {
                sh "${bob} install -r ruleset-va-standalone.yaml"
            }
        }
        stage('kubebench') {
            steps {
                sh "${bob} kubebench -r ruleset-va-standalone.yaml"
                archiveArtifacts 'build/kubebench-report/**'
            }
        }
        stage('kubeAudit') {
            steps {
                sh "${bob} kubeAudit -r ruleset-va-standalone.yaml"
                archiveArtifacts 'build/kube-audit-report/**/*'
            }
        }
        stage('kubehunter') {
            steps {
                sh "${bob} kubehunter -r ruleset-va-standalone.yaml"
                archiveArtifacts 'build/kubehunter-report/**/*'
            }
        }
        stage('kubesec') {
            steps {
                sh "${bob} kubesec -r ruleset-va-standalone.yaml"
                archiveArtifacts 'build/kubesec-reports/**/*'
            }
        }
        stage('nmap') {
            steps {
                script {
                    def podChunkSize = 40
                    echo "Scanning all containers"
                    sh "${bob} get-pods -r ruleset-va-standalone.yaml"
                    services = readFile(file: '.bob/var.pods').split('\n')
                    servicesCollated = services.toList().collate(podChunkSize)
                    servicesCollated.eachWithIndex { val, idx ->
                    println "$val in position $idx"
                    env.FILENAME = "nmapConfigFile_" + idx
                    sh "echo 'nmapConfig:'>${FILENAME}"
                    sh "    echo '  services:'>>${FILENAME}"
                    for (service in val) {
                        env.SERVICE = service
                        sh "cat ./config/nmap_template.yaml |sed -e 's/SERVICE_NAME/${SERVICE}/'>>${FILENAME}"
                        sh "echo ''>>${FILENAME}"
                    }
                    //leave in for future use when unicorn issue fixed, https://eteamproject.internal.ericsson.com/browse/ADPPRG-75690
                    // sh "echo '  enableUnicornscan:'>>${FILENAME}"
                    // sh "echo '    additionalParams:'>>${FILENAME}"
                    // sh "echo '      - \"-r300\"'>>${FILENAME}"
                    // sh "echo '      - \"-v\"'>>${FILENAME}"
                    sh "echo '  reportDir : \"nmap_reports\"'>>${FILENAME}"
                     }
                      servicesCollated.eachWithIndex { val, idx ->
                      env.FILENAME = "nmapConfigFile_" + idx
                      withCredentials([usernamePassword(credentialsId: 'SERO_Artifactory', usernameVariable: 'SERO_USER', passwordVariable: 'SERO_PASSWORD')]) {
                      sh """
                        cp ${FILENAME} nmap_config.yaml
                        ${bob} nmap-port-scanning -r ruleset-va-standalone.yaml
                      """
                      }									
                      }					  
                }
                        archiveArtifacts 'nmap_reports/nmap_report/**.*'
                        archiveArtifacts 'nmapConfigFile_*'
            }
        }
        stage('Uninstall') {
            steps {
                echo'sh "${bob} uninstall -r ruleset-va-standalone.yaml"'
            }
        }
    }
    post {
        always {
                sh "${bob} nmap-cleanup:nmap-cleanup || true"		   
                withCredentials([usernamePassword(credentialsId: 'SERO_Artifactory', usernameVariable: 'SERO_USER', passwordVariable: 'SERO_PASSWORD')]) {
                echo'sh "${bob} report || true"'	
            }
            //archiveArtifacts allowEmptyArchive: true, artifacts: 'k8s-test/target/reports/**/*.*'
            //archiveArtifacts allowEmptyArchive: true, artifacts: 'k8s-test/target/logs/**/*.*'
            //publishHTML target: [allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'k8s-test/target/reports/html-report/', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: 'HTML Report']
            archiveArtifacts artifacts: 'Vulnerability_Report/Vulnerability_Report_2.0.md', allowEmptyArchive: true
            archiveArtifacts artifacts: 'Vulnerability_Report/pdf/Vulnerability_Report_2.0.pdf', allowEmptyArchive: true
            archiveArtifacts artifacts: 'Vulnerability_Report/html/Vulnerability_Report_2.0.html', allowEmptyArchive: true			
            echo'sh "${bob} clean || true"'
            deleteDir()
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {

    def bobImage = 'bob.2.0:latest'
    def envVars = [:]

    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -> "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}:\${HOME}
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |--group-add \$(stat -c '%g' /var/run/docker.sock)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}